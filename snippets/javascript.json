{
	"Node Router Snippet": {
		"prefix": "Node Router Snippet",
		"body": [
			"const ${1: /* Nombre del modelo (inicial en minúscula) */}Controller = require(\"../controllers/${1: /* Nombre del modelo (inicial en minúscula) */}Controller.js\");",
			"",
			"const express = require(\"express\");",
			"const router = express.Router();",
			"",
			"router.get(\"/\", ${1: /* Nombre del modelo (inicial en minúscula) */}Controller.findAll);",
			"router.get(\"/:id\", ${1: /* Nombre del modelo (inicial en minúscula) */}Controller.findById);",
			"router.post(\"/\", ${1: /* Nombre del modelo (inicial en minúscula) */}Controller.create);",
			"",
			"module.exports = router;"
		]
	},
	"Node Controller Snippet": {
		"prefix": "Node Controller Snippet",
		"body": [
			"const {NotFoundError} = require(\"../errors/errors.js\");",
			"const constants = require(\"../util/constants.js\");",
			"const responseBuilder = require(\"../util/responseBuilder.js\");",
			"",
			"const ${1: /* Nombre del modelo (inicial en minúscula) */}Service = require(\"../services/${1: /* Nombre del modelo (inicial en minúscula) */}Service.js\");",
			"",
			"const findAll = async (req, res) => {",
			"\tlet response;",
			"\ttry {",
			"\t\tlet ${2: /* Nombre del modelo en plural (inicial en minúscula) */} = await ${1: /* Nombre del modelo (inicial en minúscula) */}Service.findAll();",
			"\t\tif (!Array.isArray(${2: /* Nombre del modelo en plural (inicial en minúscula) */}) || list.length == 0)",
			"\t\t\tthrow new NotFoundError(constants.ENTIDADES_NO_ENCONTRADAS);",
			"\t\tresponse = responseBuilder.getOkResponse(constants.ENTIDADES_ENCONTRADAS, ${2: /* Nombre del modelo en plural (inicial en minúscula) */});",
			"\t} catch (error) {",
			"\t\tresponse = responseBuilder.getBadResponse(error);",
			"\t}",
			"\tres.status(response.status).json(response);",
			"};",
			"",
			"const findById = async (req, res) => {",
			"\tlet response;",
			"\ttry {",
			"\t\tlet id = req.params.id;",
			"\t\tlet ${1: /* Nombre del modelo (inicial en minúscula) */} = await ${1: /* Nombre del modelo (inicial en minúscula) */}Service.findById(id);",
			"\t\tresponse = responseBuilder.getOkResponse(constants.ENTIDAD_ENCONTRADA + id, ${1: /* Nombre del modelo (inicial en minúscula) */});",
			"\t} catch (error) {",
			"\t\tresponse = responseBuilder.getBadResponse(error);",
			"\t}",
			"\tres.status(response.status).json(response);",
			"};",
			"",
			"const create = async (req, res) => {",
			"\tlet response;",
			"\ttry {",
			"\t\tlet requestBody = req.body;",
			"\t\t/* Obtener atributos necesarios desde el requestBody */",
			"\t\tlet ${1: /* Nombre del modelo (inicial en minúscula) */} = await ${1: /* Nombre del modelo (inicial en minúscula) */}Service.create(/* Atributos necesarios */);",
			"\t\tresponse = responseBuilder.getOkResponse(constants.INSERCION_EXITOSA + ${1: /* Nombre del modelo (inicial en minúscula) */}.id, ${1: /* Nombre del modelo (inicial en minúscula) */});",
			"\t} catch (error) {",
			"\t\tresponse = responseBuilder.getBadResponse(error);",
			"\t}",
			"\t",
			"\tres.status(response.status).json(response);",
			"};",
			"",
			"module.exports = {",
			"\tfindAll,",
			"\tfindById,",
			"\tcreate",
			"};"
		]
	},
	"Node Service Snippet": {
		"prefix": "Node Service Snippet",
		"body": [
			"const {InternalServerError, NotFoundError} = require(\"../errors/errors.js\");",
			"const constants = require(\"../util/constants.js\");",
			"",
			"const ${2: /* Nombre del modelo (inicial en mayúscula) */} = require(\"../models/${2: /* Nombre del modelo (inicial en mayúscula) */}.js\");",
			"",
			"const sequelize = require(\"../config/sequelize.js\");",
			"",
			"/* ---------------------------------------------------- Atributos: --------------------------------------------------- */",
			"",
			"const service = \"${1: /* Nombre del modelo (inicial en minúscula) */}Service: \";",
			"",
			"/* ------------------------------------------------ Métodos públicos: ------------------------------------------------ */",
			"",
			"const findAll = async () => {",
			"\tconsole.debug(service + \"findAll enter...\");",
			"\tlet all${3: /* Nombre del modelo en plural (inicial en mayúscula) */};",
			"\ttry {",
			"\t\tall${3: /* Nombre del modelo en plural (inicial en mayúscula) */} = await ${2: /* Nombre del modelo (inicial en mayúscula) */}.findAll({",
			"\t\t\t// attributes: [],",
			"\t\t\t// include: []",
			"\t\t});",
			"\t\tconsole.debug(all${3: /* Nombre del modelo en plural (inicial en mayúscula) */}.length + \" entidades encontradas.\");",
			"\t} catch (error) {",
			"\t\tconsole.error(error);",
			"\t\tthrow new InternalServerError(error.message);",
			"\t}",
			"\tconsole.debug(service + \"findAll exit.\");",
			"\treturn all${3: /* Nombre del modelo en plural (inicial en mayúscula) */};",
			"};",
			"",
			"const findById = async id => {",
			"\tconsole.debug(service + \"findById enter...\");",
			"\tlet ${1: /* Nombre del modelo (inicial en minúscula) */};",
			"\ttry {",
			"\t\t${1: /* Nombre del modelo (inicial en minúscula) */} = await ${2: /* Nombre del modelo (inicial en mayúscula) */}.findOne({",
			"\t\t\t// attributes: [],",
			"\t\t\t// include: [],",
			"\t\t\twhere: {",
			"\t\t\t\tid",
			"\t\t\t}",
			"\t\t});",
			"\t\tif (${1: /* Nombre del modelo (inicial en minúscula) */} == null)",
			"\t\t\tthrow new NotFoundError(constants.ENTIDAD_NO_ENCONTRADA + id);",
			"\t} catch (error) {",
			"\t\tconsole.error(error);",
			"\t\tif (error instanceof NotFoundError)",
			"\t\t\tthrow error;",
			"\t\tthrow new InternalServerError(error.message);",
			"\t}",
			"\tconsole.debug(service + \"findById exit.\");",
			"\treturn ${1: /* Nombre del modelo (inicial en minúscula) */};",
			"};",
			"",
			"const create = async (/* Atributos necesarios */) => {",
			"\tconsole.debug(service + \"create enter...\");",
			"\tlet ${1: /* Nombre del modelo (inicial en minúscula) */};",
			"\tlet transaction = await sequelize.transaction();",
			"\ttry {",
			"\t\t${1: /* Nombre del modelo (inicial en minúscula) */} = await ${2: /* Nombre del modelo (inicial en mayúscula) */}.create(",
			"\t\t\t{",
			"\t\t\t\t/* Atributos necesarios */",
			"\t\t\t}, {",
			"\t\t\t\ttransaction",
			"\t\t\t}",
			"\t\t);",
			"\t\tawait transaction.commit();",
			"\t} catch (error) {",
			"\t\tawait transaction.rollback();",
			"\t\tconsole.error(error);",
			"\t\tthrow new InternalServerError(error.message);",
			"\t}",
			"\tconsole.debug(service + \"create exit.\");",
			"\treturn ${1: /* Nombre del modelo (inicial en minúscula) */};",
			"};",
			"",
			"module.exports = {",
			"\tfindAll,",
			"\tfindById,",
			"\tcreate",
			"};"
		]
	}
}
