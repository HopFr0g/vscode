{
	"ServiceImpl": {
		"prefix": "ServiceImpl Snippet",
		"body": [
			"package ${1: /* Nombre del package raiz (por ejemplo com.example) */}.serviceimpl;",
			"",
			"import java.util.List;",
			"import java.util.Optional;",
			"",
			"import javax.transaction.Transactional;",
			"",
			"import org.apache.commons.logging.Log;",
			"import org.apache.commons.logging.LogFactory;",
			"import org.springframework.beans.factory.annotation.Autowired;",
			"import org.springframework.stereotype.Service;",
			"",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.model.${3: /* Nombre del modelo (con inicial en mayúscula) */};",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.repository.${3: /* Nombre del modelo (con inicial en mayúscula) */}Repository;",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.service.${3: /* Nombre del modelo (con inicial en mayúscula) */}Service;",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.util.Constants;",
			"",
			"@Service",
			"@Transactional",
			"public class ${3: /* Nombre del modelo (con inicial en mayúscula) */}ServiceImpl implements ${3: /* Nombre del modelo (con inicial en mayúscula) */}Service {",
			"\tprivate final static Log log = LogFactory.getLog(${3: /* Nombre del modelo (con inicial en mayúscula) */}ServiceImpl.class);",
			"\t",
			"\t@Autowired",
			"\t${3: /* Nombre del modelo (con inicial en mayúscula) */}Repository ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository;",
			"\t",
			"\t@Override",
			"\tpublic ${3: /* Nombre del modelo (con inicial en mayúscula) */} create${3: /* Nombre del modelo (con inicial en mayúscula) */}(${3: /* Nombre del modelo (con inicial en mayúscula) */} ${2: /* Nombre del modelo (con inicial en minúscula) */}) {",
			"\t\tlog.info(\"create${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\t// La entidad a crearse no puede tener el ID de una entidad ya existente:",
			"\t\tif (!${2: /* Nombre del modelo (con inicial en minúscula) */}.isNew()) {",
			"\t\t\tOptional<${3: /* Nombre del modelo (con inicial en mayúscula) */}> optional${3: /* Nombre del modelo (con inicial en mayúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.findById(${2: /* Nombre del modelo (con inicial en minúscula) */}.getId());",
			"\t\t\tif (optional${3: /* Nombre del modelo (con inicial en mayúscula) */}.isPresent())",
			"\t\t\t\tthrow new RuntimeException(Constants.CREATED_ENTITY_EXISTS + ${2: /* Nombre del modelo (con inicial en minúscula) */}.getId());",
			"\t\t}",
			"\t\t",
			"\t\t// Persistir entidad:",
			"\t\t${2: /* Nombre del modelo (con inicial en minúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.save(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\t",
			"\t\tlog.info(\"create${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn ${2: /* Nombre del modelo (con inicial en minúscula) */};",
			"\t}",
			"\t",
			"\t@Override",
			"\tpublic ${3: /* Nombre del modelo (con inicial en mayúscula) */} get${3: /* Nombre del modelo (con inicial en mayúscula) */}ById(Integer id) {",
			"\t\tlog.info(\"get${3: /* Nombre del modelo (con inicial en mayúscula) */}ById enter...\");",
			"\t\t",
			"\t\tOptional<${3: /* Nombre del modelo (con inicial en mayúscula) */}> optional${3: /* Nombre del modelo (con inicial en mayúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.findById(id);",
			"\t\tif (!optional${3: /* Nombre del modelo (con inicial en mayúscula) */}.isPresent())",
			"\t\t\tthrow new RuntimeException(Constants.GET_ENTITY_FAIL + id);",
			"\t\t",
			"\t\tlog.info(\"get${3: /* Nombre del modelo (con inicial en mayúscula) */}ById exit.\");",
			"\t\treturn optional${3: /* Nombre del modelo (con inicial en mayúscula) */}.get();",
			"\t}",
			"\t",
			"\t@Override",
			"\tpublic List<${3: /* Nombre del modelo (con inicial en mayúscula) */}> getAll${3: /* Nombre del modelo (con inicial en mayúscula) */}() {",
			"\t\tlog.info(\"getAll${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\tList<${3: /* Nombre del modelo (con inicial en mayúscula) */}> ${4: /* Nombre del modelo (con inicial en minúscula, en plural) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.findAll();",
			"\t\t",
			"\t\tlog.info(\"getAll${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn ${4: /* Nombre del modelo (con inicial en minúscula, en plural) */};",
			"\t}",
			"\t",
			"\t@Override",
			"\tpublic ${3: /* Nombre del modelo (con inicial en mayúscula) */} update${3: /* Nombre del modelo (con inicial en mayúscula) */}(${3: /* Nombre del modelo (con inicial en mayúscula) */} ${2: /* Nombre del modelo (con inicial en minúscula) */}) {",
			"\t\tlog.info(\"update${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\t// La entidad a actualizarse debe tener el ID de una entidad ya existente:",
			"\t\tif (!${2: /* Nombre del modelo (con inicial en minúscula) */}.isNew()) {",
			"\t\t\tOptional<${3: /* Nombre del modelo (con inicial en mayúscula) */}> optional${3: /* Nombre del modelo (con inicial en mayúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.findById(${2: /* Nombre del modelo (con inicial en minúscula) */}.getId());",
			"\t\t\tif (!optional${3: /* Nombre del modelo (con inicial en mayúscula) */}.isPresent())",
			"\t\t\t\tthrow new RuntimeException(Constants.UPDATED_ENTITY_NOT_EXISTS + ${2: /* Nombre del modelo (con inicial en minúscula) */}.getId());",
			"\t\t} else {",
			"\t\t\tthrow new RuntimeException(Constants.UPDATED_ENTITY_NO_ID);",
			"\t\t}",
			"\t\t",
			"\t\t// Persistir entidad:",
			"\t\t${2: /* Nombre del modelo (con inicial en minúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.save(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\t",
			"\t\tlog.info(\"update${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn ${2: /* Nombre del modelo (con inicial en minúscula) */};",
			"\t}",
			"\t",
			"\t@Override",
			"\tpublic ${3: /* Nombre del modelo (con inicial en mayúscula) */} delete${3: /* Nombre del modelo (con inicial en mayúscula) */}(Integer id) {",
			"\t\tlog.info(\"delete${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\tOptional<${3: /* Nombre del modelo (con inicial en mayúscula) */}> optional${3: /* Nombre del modelo (con inicial en mayúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.findById(id);",
			"\t\tif (!optional${3: /* Nombre del modelo (con inicial en mayúscula) */}.isPresent())",
			"\t\t\tthrow new RuntimeException(Constants.GET_ENTITY_FAIL + id);",
			"\t\t",
			"\t\t${2: /* Nombre del modelo (con inicial en minúscula) */}Repository.deleteById(id);",
			"\t\t",
			"\t\tlog.info(\"delete${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn optional${3: /* Nombre del modelo (con inicial en mayúscula) */}.get();",
			"\t}",
			"}"
		]
	},
	"Service": {
		"prefix": "Service Snippet",
		"body": [
			"package ${1: /* Nombre del package raiz (por ejemplo com.example) */}.service;",
			"",
			"import java.util.List;",
			"",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.model.${3: /* Nombre del modelo (inicial en mayúscula) */};",
			"",
			"public interface ${3: /* Nombre del modelo (inicial en mayúscula) */}Service {",
			"\tpublic ${3: /* Nombre del modelo (inicial en mayúscula) */} create${3: /* Nombre del modelo (inicial en mayúscula) */}(${3: /* Nombre del modelo (inicial en mayúscula) */} ${2: /* Nombre del modelo (inicial en minúscula) */});",
			"\tpublic ${3: /* Nombre del modelo (inicial en mayúscula) */} get${3: /* Nombre del modelo (inicial en mayúscula) */}ById(Integer id);",
			"\tpublic List<${3: /* Nombre del modelo (inicial en mayúscula) */}> getAll${3: /* Nombre del modelo (inicial en mayúscula) */}();",
			"\tpublic ${3: /* Nombre del modelo (inicial en mayúscula) */} update${3: /* Nombre del modelo (inicial en mayúscula) */}(${3: /* Nombre del modelo (inicial en mayúscula) */} ${2: /* Nombre del modelo (inicial en minúscula) */});",
			"\tpublic ${3: /* Nombre del modelo (inicial en mayúscula) */} delete${3: /* Nombre del modelo (inicial en mayúscula) */}(Integer id);",
			"}"
		]
	},
	"Repository": {
		"prefix": "Repository Snippet",
		"body": [
			"package ${1: /* Nombre del package raiz (por ejemplo com.example) */}.repository;",
			"",
			"import org.springframework.data.jpa.repository.JpaRepository;",
			"",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.model.${2: /* Nombre del modelo (inicial en mayúscula) */};",
			"",
			"public interface ${2: /* Nombre del modelo (inicial en mayúscula) */}Repository extends JpaRepository<${2: /* Nombre del modelo (inicial en mayúscula) */}, Integer> {",
			"\t",
			"}"
		]
	},
	"Model": {
		"prefix": "Model Snippet",
		"body": [
			"package ${1: /* Nombre del package raiz (por ejemplo com.example) */}.model;",
			"",
			"import javax.persistence.Entity;",
			"import javax.persistence.Table;",
			"",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.base.BaseEntity;",
			"",
			"@Entity",
			"@Table(name = \"${2: /* Nombre de la tabla en la BD */}\", schema = \"${3: /* Nombre del esquema en la BD */}\")",
			"public class ${4: /* Nombre de la clase modelo (inicial en mayúscula) */} extends BaseEntity {",
			"\t",
			"}"
		]
	},
	"Controller": {
		"prefix": "Controller Snippet",
		"body": [
			"package ${1: /* Nombre del package raiz (por ejemplo com.example) */}.controller;",
			"",
			"import java.util.List;",
			"",
			"import org.apache.commons.logging.Log;",
			"import org.apache.commons.logging.LogFactory;",
			"import org.springframework.beans.factory.annotation.Autowired;",
			"import org.springframework.http.HttpStatus;",
			"import org.springframework.http.ResponseEntity;",
			"import org.springframework.web.bind.annotation.PathVariable;",
			"import org.springframework.web.bind.annotation.RequestBody;",
			"import org.springframework.web.bind.annotation.RequestMapping;",
			"import org.springframework.web.bind.annotation.RequestMethod;",
			"import org.springframework.web.bind.annotation.RestController;",
			"",
			"import com.fasterxml.jackson.databind.JsonNode;",
			"",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.base.BaseController;",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.base.BaseResponse;",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.model.${3: /* Nombre del modelo (con inicial en mayúscula) */};",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.service.${3: /* Nombre del modelo (con inicial en mayúscula) */}Service;",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.util.Constants;",
			"import ${1: /* Nombre del package raiz (por ejemplo com.example) */}.util.Utils;",
			"import io.swagger.annotations.ApiOperation;",
			"",
			"@RestController",
			"public class ${3: /* Nombre del modelo (con inicial en mayúscula) */}Controller extends BaseController {",
			"\tprivate static Log log = LogFactory.getLog(${3: /* Nombre del modelo (con inicial en mayúscula) */}Controller.class);",
			"\t",
			"\t@Autowired",
			"\t${3: /* Nombre del modelo (con inicial en mayúscula) */}Service ${2: /* Nombre del modelo (con inicial en minúscula) */}Service;",
			"\t",
			"\t@ApiOperation(value = \"\")",
			"\t@RequestMapping(value = \"/${2: /* Nombre del modelo (con inicial en minúscula) */}\", method = RequestMethod.POST, consumes = \"application/json\")",
			"\tpublic ResponseEntity<BaseResponse> create${3: /* Nombre del modelo (con inicial en mayúscula) */}(@RequestBody ${3: /* Nombre del modelo (con inicial en mayúscula) */} ${2: /* Nombre del modelo (con inicial en minúscula) */}) {",
			"\t\tlog.info(\"create${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\t// Crear entidad en la capa service y parsear la misma a json:",
			"\t\t${2: /* Nombre del modelo (con inicial en minúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Service.create${3: /* Nombre del modelo (con inicial en mayúscula) */}(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\tList<JsonNode> elementos = Utils.getListJsonFromEntity(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\t",
			"\t\t// Crear response:",
			"\t\tBaseResponse baseResponse = BaseResponse.getOkResponse(this.getClass(), Constants.CREATED_ENTITY_OK + ${2: /* Nombre del modelo (con inicial en minúscula) */}.getId(), elementos);",
			"\t\t",
			"\t\tlog.info(\"create${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn new ResponseEntity<BaseResponse>(baseResponse, HttpStatus.OK);",
			"\t}",
			"\t",
			"\t@ApiOperation(value = \"\")",
			"\t@RequestMapping(value = \"/${2: /* Nombre del modelo (con inicial en minúscula) */}/{id}\", method = RequestMethod.GET)",
			"\tpublic ResponseEntity<BaseResponse> get${3: /* Nombre del modelo (con inicial en mayúscula) */}ById(@PathVariable(\"id\") Integer id) {",
			"\t\tlog.info(\"get${3: /* Nombre del modelo (con inicial en mayúscula) */}ById enter...\");",
			"\t\t",
			"\t\t// Obtener entidad en la capa service y parsear a json:",
			"\t\t${3: /* Nombre del modelo (con inicial en mayúscula) */} ${2: /* Nombre del modelo (con inicial en minúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Service.get${3: /* Nombre del modelo (con inicial en mayúscula) */}ById(id);",
			"\t\tList<JsonNode> elementos = Utils.getListJsonFromEntity(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\t",
			"\t\t// Crear response:",
			"\t\tBaseResponse baseResponse = BaseResponse.getOkResponse(this.getClass(), Constants.GET_ENTITY_OK + ${2: /* Nombre del modelo (con inicial en minúscula) */}.getId(), elementos);",
			"\t\t",
			"\t\tlog.info(\"get${3: /* Nombre del modelo (con inicial en mayúscula) */}ById exit.\");",
			"\t\treturn new ResponseEntity<BaseResponse>(baseResponse, HttpStatus.OK);",
			"\t}",
			"\t",
			"\t@ApiOperation(value = \"\")",
			"\t@RequestMapping(value = \"/${2: /* Nombre del modelo (con inicial en minúscula) */}\", method = RequestMethod.GET)",
			"\tpublic ResponseEntity<BaseResponse> getAll${3: /* Nombre del modelo (con inicial en mayúscula) */}() {",
			"\t\tlog.info(\"getAll${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\t// Obtener entidades en la capa service y parsear a json:",
			"\t\tList<${3: /* Nombre del modelo (con inicial en mayúscula) */}> ${4: /* Nombre del modelo (con inicial en minúscula, en plural) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Service.getAll${3: /* Nombre del modelo (con inicial en mayúscula) */}();",
			"\t\tList<JsonNode> elementos = Utils.getListJsonFromList(${4: /* Nombre del modelo (con inicial en minúscula, en plural) */});",
			"\t\t",
			"\t\t// Crear response:",
			"\t\tBaseResponse baseResponse = BaseResponse.getOkResponse(this.getClass(), Constants.GET_ENTITIES_OK, elementos);",
			"\t\t",
			"\t\tlog.info(\"getAll${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn new ResponseEntity<BaseResponse>(baseResponse, HttpStatus.OK);",
			"\t}",
			"\t",
			"\t@ApiOperation(value = \"\")",
			"\t@RequestMapping(value = \"/${2: /* Nombre del modelo (con inicial en minúscula) */}\", method = RequestMethod.PUT, consumes = \"application/json\")",
			"\tpublic ResponseEntity<BaseResponse> update${3: /* Nombre del modelo (con inicial en mayúscula) */}(@RequestBody ${3: /* Nombre del modelo (con inicial en mayúscula) */} ${2: /* Nombre del modelo (con inicial en minúscula) */}) {",
			"\t\tlog.info(\"update${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\t// Actualizar entidad en la capa service y parsear la misma a json:",
			"\t\t${2: /* Nombre del modelo (con inicial en minúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Service.update${3: /* Nombre del modelo (con inicial en mayúscula) */}(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\tList<JsonNode> elementos = Utils.getListJsonFromEntity(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\t",
			"\t\t// Crear response:",
			"\t\tBaseResponse baseResponse = BaseResponse.getOkResponse(this.getClass(), Constants.UPDATED_ENTITY_OK + ${2: /* Nombre del modelo (con inicial en minúscula) */}.getId(), elementos);",
			"\t\t",
			"\t\tlog.info(\"update${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn new ResponseEntity<BaseResponse>(baseResponse, HttpStatus.OK);",
			"\t}",
			"\t",
			"\t@ApiOperation(value = \"\")",
			"\t@RequestMapping(value = \"/${2: /* Nombre del modelo (con inicial en minúscula) */}/{id}\", method = RequestMethod.DELETE)",
			"\tpublic ResponseEntity<BaseResponse> delete${3: /* Nombre del modelo (con inicial en mayúscula) */}(@PathVariable Integer id) {",
			"\t\tlog.info(\"delete${3: /* Nombre del modelo (con inicial en mayúscula) */} enter...\");",
			"\t\t",
			"\t\t// Eliminar entidad en la capa service, obtener la entidad eliminada y parsearla a json:",
			"\t\t${3: /* Nombre del modelo (con inicial en mayúscula) */} ${2: /* Nombre del modelo (con inicial en minúscula) */} = ${2: /* Nombre del modelo (con inicial en minúscula) */}Service.delete${3: /* Nombre del modelo (con inicial en mayúscula) */}(id);",
			"\t\tList<JsonNode> elementos = Utils.getListJsonFromEntity(${2: /* Nombre del modelo (con inicial en minúscula) */});",
			"\t\t",
			"\t\t// Crear response:",
			"\t\tBaseResponse baseResponse = BaseResponse.getOkResponse(this.getClass(), Constants.DELETED_ENTITY_OK + id, elementos);",
			"\t\t",
			"\t\tlog.info(\"delete${3: /* Nombre del modelo (con inicial en mayúscula) */} exit.\");",
			"\t\treturn new ResponseEntity<BaseResponse>(baseResponse, HttpStatus.OK);",
			"\t}",
			"}"
		]
	}
}
